{"ast":null,"code":"import { Configuration, OpenAIApi } from \"openai\";\n\n// 환경변수 또는 직접 입력 (보안을 위해 .env 사용 권장)\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY || \"여기에_본인_API_KEY_입력\";\nconst configuration = new Configuration({\n  apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function extractTableFromImage(imageFile) {\n  // 이미지를 base64로 변환\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result.split(',')[1]);\n    reader.onerror = error => reject(error);\n  });\n  const base64Image = await toBase64(imageFile);\n  const response = await openai.createChatCompletion({\n    model: \"gpt-4-vision-preview\",\n    // Vision 지원 모델\n    messages: [{\n      role: \"user\",\n      content: [{\n        type: \"text\",\n        content: \"이 이미지의 표 내용을 마크다운 표로 추출해줘.\"\n      }, {\n        type: \"image_url\",\n        image_url: {\n          \"url\": `data:image/jpeg;base64,${base64Image}`\n        }\n      }]\n    }],\n    max_tokens: 1024\n  });\n  return response.data.choices[0].message.content;\n}","map":{"version":3,"names":["Configuration","OpenAIApi","apiKey","process","env","REACT_APP_OPENAI_API_KEY","configuration","openai","extractTableFromImage","imageFile","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","base64Image","response","createChatCompletion","model","messages","role","content","type","image_url","max_tokens","data","choices","message"],"sources":["C:/Users/atom2/mathocr/mathocr-app/src/utils/openaiVision.js"],"sourcesContent":["import { Configuration, OpenAIApi } from \"openai\";\n\n// 환경변수 또는 직접 입력 (보안을 위해 .env 사용 권장)\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY || \"여기에_본인_API_KEY_입력\";\n\nconst configuration = new Configuration({\n  apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function extractTableFromImage(imageFile) {\n  // 이미지를 base64로 변환\n  const toBase64 = file =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result.split(',')[1]);\n      reader.onerror = error => reject(error);\n    });\n\n  const base64Image = await toBase64(imageFile);\n\n  const response = await openai.createChatCompletion({\n    model: \"gpt-4-vision-preview\", // Vision 지원 모델\n    messages: [\n      {\n        role: \"user\",\n        content: [\n          { type: \"text\", content: \"이 이미지의 표 내용을 마크다운 표로 추출해줘.\" },\n          {\n            type: \"image_url\",\n            image_url: {\n              \"url\": `data:image/jpeg;base64,${base64Image}`\n            }\n          }\n        ]\n      }\n    ],\n    max_tokens: 1024\n  });\n\n  return response.data.choices[0].message.content;\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;;AAEjD;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,mBAAmB;AAE1E,MAAMC,aAAa,GAAG,IAAIN,aAAa,CAAC;EACtCE;AACF,CAAC,CAAC;AACF,MAAMK,MAAM,GAAG,IAAIN,SAAS,CAACK,aAAa,CAAC;AAE3C,OAAO,eAAeE,qBAAqBA,CAACC,SAAS,EAAE;EACrD;EACA,MAAMC,QAAQ,GAAGC,IAAI,IACnB,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC/B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACN,IAAI,CAAC;IAC1BI,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1DL,MAAM,CAACM,OAAO,GAAGC,KAAK,IAAIR,MAAM,CAACQ,KAAK,CAAC;EACzC,CAAC,CAAC;EAEJ,MAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACD,SAAS,CAAC;EAE7C,MAAMe,QAAQ,GAAG,MAAMjB,MAAM,CAACkB,oBAAoB,CAAC;IACjDC,KAAK,EAAE,sBAAsB;IAAE;IAC/BC,QAAQ,EAAE,CACR;MACEC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,CACP;QAAEC,IAAI,EAAE,MAAM;QAAED,OAAO,EAAE;MAA6B,CAAC,EACvD;QACEC,IAAI,EAAE,WAAW;QACjBC,SAAS,EAAE;UACT,KAAK,EAAE,0BAA0BR,WAAW;QAC9C;MACF,CAAC;IAEL,CAAC,CACF;IACDS,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,OAAOR,QAAQ,CAACS,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,OAAO;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}