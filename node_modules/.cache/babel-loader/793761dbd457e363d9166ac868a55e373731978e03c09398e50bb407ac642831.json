{"ast":null,"code":"import OpenAI from \"openai\";\n\n// 환경변수 또는 직접 입력 (보안을 위해 .env 사용 권장)\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY || \"여기에_본인_API_KEY_입력\";\n\n// ⚠️ 브라우저에서 API 키 노출 위험! 실제 서비스에서는 백엔드 프록시를 사용하세요.\nconst openai = new OpenAI({\n  apiKey,\n  dangerouslyAllowBrowser: true\n});\nexport async function extractTableFromImage(imageFile) {\n  // 이미지를 base64로 변환\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result.split(',')[1]);\n    reader.onerror = error => reject(error);\n  });\n  const base64Image = await toBase64(imageFile);\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4-vision-preview\",\n    // Vision 지원 모델\n    messages: [{\n      role: \"user\",\n      content: [{\n        type: \"text\",\n        text: \"이 이미지의 표 내용을 마크다운 표로 추출해줘.\"\n      }, {\n        type: \"image_url\",\n        image_url: {\n          \"url\": `data:image/jpeg;base64,${base64Image}`\n        }\n      }]\n    }],\n    max_tokens: 1024\n  });\n  return response.choices[0].message.content;\n}","map":{"version":3,"names":["OpenAI","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","dangerouslyAllowBrowser","extractTableFromImage","imageFile","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","base64Image","response","chat","completions","create","model","messages","role","content","type","text","image_url","max_tokens","choices","message"],"sources":["C:/Users/atom2/mathocr/mathocr-app/src/utils/openaiVision.js"],"sourcesContent":["import OpenAI from \"openai\";\n\n// 환경변수 또는 직접 입력 (보안을 위해 .env 사용 권장)\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY || \"여기에_본인_API_KEY_입력\";\n\n// ⚠️ 브라우저에서 API 키 노출 위험! 실제 서비스에서는 백엔드 프록시를 사용하세요.\nconst openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nexport async function extractTableFromImage(imageFile) {\n  // 이미지를 base64로 변환\n  const toBase64 = file =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result.split(',')[1]);\n      reader.onerror = error => reject(error);\n    });\n\n  const base64Image = await toBase64(imageFile);\n\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4-vision-preview\", // Vision 지원 모델\n    messages: [\n      {\n        role: \"user\",\n        content: [\n          { type: \"text\", text: \"이 이미지의 표 내용을 마크다운 표로 추출해줘.\" },\n          {\n            type: \"image_url\",\n            image_url: {\n              \"url\": `data:image/jpeg;base64,${base64Image}`\n            }\n          }\n        ]\n      }\n    ],\n    max_tokens: 1024\n  });\n\n  return response.choices[0].message.content;\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;;AAE3B;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,mBAAmB;;AAE1E;AACA,MAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC;EAAEC,MAAM;EAAEK,uBAAuB,EAAE;AAAK,CAAC,CAAC;AAEpE,OAAO,eAAeC,qBAAqBA,CAACC,SAAS,EAAE;EACrD;EACA,MAAMC,QAAQ,GAAGC,IAAI,IACnB,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC/B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACN,IAAI,CAAC;IAC1BI,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1DL,MAAM,CAACM,OAAO,GAAGC,KAAK,IAAIR,MAAM,CAACQ,KAAK,CAAC;EACzC,CAAC,CAAC;EAEJ,MAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACD,SAAS,CAAC;EAE7C,MAAMe,QAAQ,GAAG,MAAMlB,MAAM,CAACmB,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;IACpDC,KAAK,EAAE,sBAAsB;IAAE;IAC/BC,QAAQ,EAAE,CACR;MACEC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,CACP;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAA6B,CAAC,EACpD;QACED,IAAI,EAAE,WAAW;QACjBE,SAAS,EAAE;UACT,KAAK,EAAE,0BAA0BX,WAAW;QAC9C;MACF,CAAC;IAEL,CAAC,CACF;IACDY,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,OAAOX,QAAQ,CAACY,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,OAAO;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}